// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/Sensor.proto

/*
Package sensor is a generated protocol buffer package.

It is generated from these files:
	protobuf/Sensor.proto

It has these top-level messages:
	SensorReading
	SensorData
	AdapterSelector
	StatefulSensorRequest
	StatelessSensorRequest
	SensorCheckConfig
*/
package sensor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SensorReading struct {
	SensorId string           `protobuf:"bytes,1,opt,name=sensor_id,json=sensorId" json:"sensor_id,omitempty"`
	Adapter  *AdapterSelector `protobuf:"bytes,2,opt,name=adapter" json:"adapter,omitempty"`
	// Types that are valid to be assigned to Request:
	//	*SensorReading_StatefulRequest
	//	*SensorReading_StatelessRequest
	Request isSensorReading_Request `protobuf_oneof:"request"`
}

func (m *SensorReading) Reset()                    { *m = SensorReading{} }
func (m *SensorReading) String() string            { return proto.CompactTextString(m) }
func (*SensorReading) ProtoMessage()               {}
func (*SensorReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isSensorReading_Request interface {
	isSensorReading_Request()
}

type SensorReading_StatefulRequest struct {
	StatefulRequest *StatefulSensorRequest `protobuf:"bytes,10,opt,name=stateful_request,json=statefulRequest,oneof"`
}
type SensorReading_StatelessRequest struct {
	StatelessRequest *StatelessSensorRequest `protobuf:"bytes,20,opt,name=stateless_request,json=statelessRequest,oneof"`
}

func (*SensorReading_StatefulRequest) isSensorReading_Request()  {}
func (*SensorReading_StatelessRequest) isSensorReading_Request() {}

func (m *SensorReading) GetRequest() isSensorReading_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SensorReading) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

func (m *SensorReading) GetAdapter() *AdapterSelector {
	if m != nil {
		return m.Adapter
	}
	return nil
}

func (m *SensorReading) GetStatefulRequest() *StatefulSensorRequest {
	if x, ok := m.GetRequest().(*SensorReading_StatefulRequest); ok {
		return x.StatefulRequest
	}
	return nil
}

func (m *SensorReading) GetStatelessRequest() *StatelessSensorRequest {
	if x, ok := m.GetRequest().(*SensorReading_StatelessRequest); ok {
		return x.StatelessRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SensorReading) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SensorReading_OneofMarshaler, _SensorReading_OneofUnmarshaler, _SensorReading_OneofSizer, []interface{}{
		(*SensorReading_StatefulRequest)(nil),
		(*SensorReading_StatelessRequest)(nil),
	}
}

func _SensorReading_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SensorReading)
	// request
	switch x := m.Request.(type) {
	case *SensorReading_StatefulRequest:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatefulRequest); err != nil {
			return err
		}
	case *SensorReading_StatelessRequest:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatelessRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SensorReading.Request has unexpected type %T", x)
	}
	return nil
}

func _SensorReading_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SensorReading)
	switch tag {
	case 10: // request.stateful_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatefulSensorRequest)
		err := b.DecodeMessage(msg)
		m.Request = &SensorReading_StatefulRequest{msg}
		return true, err
	case 20: // request.stateless_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatelessSensorRequest)
		err := b.DecodeMessage(msg)
		m.Request = &SensorReading_StatelessRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SensorReading_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SensorReading)
	// request
	switch x := m.Request.(type) {
	case *SensorReading_StatefulRequest:
		s := proto.Size(x.StatefulRequest)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SensorReading_StatelessRequest:
		s := proto.Size(x.StatelessRequest)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SensorData struct {
	Id           string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ResponseData []byte `protobuf:"bytes,50,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"`
}

func (m *SensorData) Reset()                    { *m = SensorData{} }
func (m *SensorData) String() string            { return proto.CompactTextString(m) }
func (*SensorData) ProtoMessage()               {}
func (*SensorData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SensorData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SensorData) GetResponseData() []byte {
	if m != nil {
		return m.ResponseData
	}
	return nil
}

type AdapterSelector struct {
	Name           string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MinimumVersion string `protobuf:"bytes,2,opt,name=minimum_version,json=minimumVersion" json:"minimum_version,omitempty"`
}

func (m *AdapterSelector) Reset()                    { *m = AdapterSelector{} }
func (m *AdapterSelector) String() string            { return proto.CompactTextString(m) }
func (*AdapterSelector) ProtoMessage()               {}
func (*AdapterSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AdapterSelector) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AdapterSelector) GetMinimumVersion() string {
	if m != nil {
		return m.MinimumVersion
	}
	return ""
}

type StatefulSensorRequest struct {
	State  []byte             `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Config *SensorCheckConfig `protobuf:"bytes,10,opt,name=config" json:"config,omitempty"`
}

func (m *StatefulSensorRequest) Reset()                    { *m = StatefulSensorRequest{} }
func (m *StatefulSensorRequest) String() string            { return proto.CompactTextString(m) }
func (*StatefulSensorRequest) ProtoMessage()               {}
func (*StatefulSensorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatefulSensorRequest) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *StatefulSensorRequest) GetConfig() *SensorCheckConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type StatelessSensorRequest struct {
	Config *SensorCheckConfig `protobuf:"bytes,10,opt,name=config" json:"config,omitempty"`
}

func (m *StatelessSensorRequest) Reset()                    { *m = StatelessSensorRequest{} }
func (m *StatelessSensorRequest) String() string            { return proto.CompactTextString(m) }
func (*StatelessSensorRequest) ProtoMessage()               {}
func (*StatelessSensorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StatelessSensorRequest) GetConfig() *SensorCheckConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type SensorCheckConfig struct {
	Config map[string]*google_protobuf.Any `protobuf:"bytes,1,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SensorCheckConfig) Reset()                    { *m = SensorCheckConfig{} }
func (m *SensorCheckConfig) String() string            { return proto.CompactTextString(m) }
func (*SensorCheckConfig) ProtoMessage()               {}
func (*SensorCheckConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SensorCheckConfig) GetConfig() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*SensorReading)(nil), "stackstate.sensor.api.SensorReading")
	proto.RegisterType((*SensorData)(nil), "stackstate.sensor.api.SensorData")
	proto.RegisterType((*AdapterSelector)(nil), "stackstate.sensor.api.AdapterSelector")
	proto.RegisterType((*StatefulSensorRequest)(nil), "stackstate.sensor.api.StatefulSensorRequest")
	proto.RegisterType((*StatelessSensorRequest)(nil), "stackstate.sensor.api.StatelessSensorRequest")
	proto.RegisterType((*SensorCheckConfig)(nil), "stackstate.sensor.api.SensorCheckConfig")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SensorService service

type SensorServiceClient interface {
	ReadSensorData(ctx context.Context, in *SensorReading, opts ...grpc.CallOption) (*SensorData, error)
}

type sensorServiceClient struct {
	cc *grpc.ClientConn
}

func NewSensorServiceClient(cc *grpc.ClientConn) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) ReadSensorData(ctx context.Context, in *SensorReading, opts ...grpc.CallOption) (*SensorData, error) {
	out := new(SensorData)
	err := grpc.Invoke(ctx, "/stackstate.sensor.api.SensorService/ReadSensorData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SensorService service

type SensorServiceServer interface {
	ReadSensorData(context.Context, *SensorReading) (*SensorData, error)
}

func RegisterSensorServiceServer(s *grpc.Server, srv SensorServiceServer) {
	s.RegisterService(&_SensorService_serviceDesc, srv)
}

func _SensorService_ReadSensorData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).ReadSensorData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stackstate.sensor.api.SensorService/ReadSensorData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).ReadSensorData(ctx, req.(*SensorReading))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stackstate.sensor.api.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadSensorData",
			Handler:    _SensorService_ReadSensorData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/Sensor.proto",
}

func init() { proto.RegisterFile("protobuf/Sensor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xe1, 0x6b, 0x13, 0x31,
	0x18, 0xc6, 0x77, 0x37, 0xb7, 0xd9, 0xb7, 0x5d, 0xdb, 0x85, 0x56, 0xba, 0xfa, 0xa5, 0x9e, 0x43,
	0x0f, 0xd1, 0x2b, 0x54, 0x3f, 0x88, 0x9f, 0xd6, 0x4d, 0x41, 0x41, 0x14, 0xae, 0x20, 0x38, 0x85,
	0x92, 0xdd, 0xbd, 0xad, 0xa1, 0x77, 0x49, 0x4d, 0x72, 0x85, 0xfe, 0x5b, 0xfb, 0x0b, 0xa5, 0x49,
	0xee, 0x18, 0xb3, 0x2b, 0x7e, 0xf0, 0x53, 0x93, 0xe7, 0x9e, 0xe7, 0x97, 0xf4, 0x21, 0x2f, 0x74,
	0x97, 0x52, 0x68, 0x71, 0x5d, 0xcc, 0x86, 0x13, 0xe4, 0x4a, 0xc8, 0xc8, 0xec, 0x49, 0x57, 0x69,
	0x9a, 0x2c, 0x94, 0xa6, 0x1a, 0x23, 0x65, 0x3f, 0xd0, 0x25, 0xeb, 0x9f, 0xce, 0x85, 0x98, 0x67,
	0x38, 0xac, 0x42, 0x94, 0xaf, 0x6d, 0x22, 0xb8, 0xf1, 0xe1, 0xd8, 0x22, 0x62, 0xa4, 0x29, 0xe3,
	0x73, 0xf2, 0x18, 0x6a, 0x36, 0x3a, 0x65, 0x69, 0xcf, 0x1b, 0x78, 0x61, 0x2d, 0x7e, 0x68, 0x85,
	0x4f, 0x29, 0x39, 0x87, 0x23, 0x9a, 0xd2, 0xa5, 0x46, 0xd9, 0xf3, 0x07, 0x5e, 0x58, 0x1f, 0x3d,
	0x8b, 0xb6, 0x1e, 0x19, 0x8d, 0xad, 0x6b, 0x82, 0x19, 0x26, 0x5a, 0xc8, 0xb8, 0x8c, 0x91, 0xef,
	0xd0, 0x36, 0xe6, 0x59, 0x91, 0x4d, 0x25, 0xfe, 0x2e, 0x50, 0xe9, 0x1e, 0x18, 0xd4, 0xcb, 0x7b,
	0x50, 0x13, 0x67, 0x2f, 0xaf, 0x69, 0x32, 0x1f, 0xf7, 0xe2, 0x56, 0xc9, 0x71, 0x12, 0xf9, 0x09,
	0x27, 0x46, 0xca, 0x50, 0xa9, 0x8a, 0xdd, 0x31, 0xec, 0x57, 0xbb, 0xd8, 0x1b, 0xff, 0x5d, 0x78,
	0xbb, 0x22, 0x39, 0xed, 0xa2, 0x06, 0x47, 0x8e, 0x19, 0x8c, 0x01, 0xac, 0xff, 0x3d, 0xd5, 0x94,
	0x34, 0xc1, 0xaf, 0x9a, 0xf2, 0x59, 0x4a, 0x9e, 0xc2, 0xb1, 0x44, 0xb5, 0x14, 0x5c, 0xe1, 0x34,
	0xa5, 0x9a, 0xf6, 0x46, 0x03, 0x2f, 0x6c, 0xc4, 0x8d, 0x52, 0xdc, 0x84, 0x82, 0x2f, 0xd0, 0xba,
	0x53, 0x11, 0x21, 0xf0, 0x80, 0xd3, 0x1c, 0x1d, 0xc9, 0xac, 0xc9, 0x73, 0x68, 0xe5, 0x8c, 0xb3,
	0xbc, 0xc8, 0xa7, 0x2b, 0x94, 0x8a, 0x09, 0x6e, 0x7a, 0xaf, 0xc5, 0x4d, 0x27, 0x7f, 0xb3, 0x6a,
	0x20, 0xa0, 0xbb, 0xb5, 0x27, 0xd2, 0x81, 0x03, 0xf3, 0x57, 0x0c, 0xb6, 0x11, 0xdb, 0x0d, 0x39,
	0x87, 0xc3, 0x44, 0xf0, 0x19, 0x9b, 0xbb, 0xee, 0xc3, 0xfb, 0xfa, 0x31, 0xcb, 0xcb, 0x5f, 0x98,
	0x2c, 0x2e, 0x8d, 0x3f, 0x76, 0xb9, 0xe0, 0x0a, 0x1e, 0x6d, 0x2f, 0xef, 0x3f, 0xb0, 0x6f, 0x3c,
	0x38, 0xf9, 0xeb, 0x2b, 0xf9, 0x5c, 0x71, 0xbd, 0xc1, 0x7e, 0x58, 0x1f, 0xbd, 0xf9, 0x57, 0x6e,
	0x64, 0x7f, 0x3e, 0x70, 0x2d, 0xd7, 0xe5, 0x19, 0xfd, 0xaf, 0x50, 0xbf, 0x25, 0x93, 0x36, 0xec,
	0x2f, 0x70, 0xed, 0xba, 0xdf, 0x2c, 0xc9, 0x0b, 0x38, 0x58, 0xd1, 0xac, 0x40, 0xf7, 0xd0, 0x3b,
	0x91, 0x1d, 0xa2, 0xa8, 0x1c, 0xa2, 0x68, 0xcc, 0xd7, 0xb1, 0xb5, 0xbc, 0xf3, 0xdf, 0x7a, 0xa3,
	0xac, 0x1c, 0xa4, 0x09, 0xca, 0x15, 0x4b, 0x90, 0xfc, 0x80, 0xe6, 0x66, 0xa6, 0x6e, 0xbd, 0x94,
	0xb3, 0x9d, 0x37, 0x76, 0x03, 0xd8, 0x7f, 0xb2, 0xd3, 0x65, 0x5e, 0xcf, 0xde, 0xc5, 0x19, 0x9c,
	0x26, 0x22, 0xdf, 0xee, 0xbc, 0x3a, 0x1a, 0xda, 0xcd, 0xf5, 0xa1, 0xb9, 0xec, 0xeb, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xf2, 0xeb, 0x78, 0xf9, 0x2f, 0x04, 0x00, 0x00,
}
